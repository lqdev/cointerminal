
v0.25.1
-------

Documentation: fixing the TOC


v0.25.0
-------

Breaking changes: engine node >= 4.5, because of node v6 'new Buffer' deprecation migration


v0.24.30
--------

Fixed bad right bitshift >> to >>>


v0.24.28 - v0.24.29
-------------------

Replace the '&' in the package description by 'and' (because of a long running bug on npmjs.org)


v0.24.27
--------

Dependencies


v0.24.26
--------

termkit.autoComplete() now accept a fourth argument: 'prefix', useful to ease issue #13


v0.24.25
--------

New: term.markupOnly()


v0.24.24
--------

Badges


v0.24.23
--------

NextGenEvents updated


v0.24.22
--------

Bugfix: ^ caret in inputField() now works


v0.24.21
--------

Dependencies


v0.24.20
--------

Codewake badge


v0.24.19
--------

Dependencies


v0.24.18
--------

Markup not performing styleReset is now fixed


v0.24.17
--------

Dependencies


v0.24.15 - v0.24.16
-------------------

Force CRLF with `term.options.crlf = true`.
Not official ATM.


v0.24.14
--------

Fix issue #12 (when the TERM env variable does not exist)


v0.24.13
--------

Dependencies


v0.24.12
--------

Dependencies


v0.24.11
--------

Dependencies


v0.24.10
--------

Dependencies


v0.24.9
-------

Yet another fix to progressBar. Using async-kit's setSafeTimeout() instead of an internal one.


v0.24.8
-------

Minor fix in progressBar (bad size when progress/eta/item is undefined)


v0.24.7
-------

Timeout issues fixed when CPU-bound/sync task kick in


v0.24.6
-------

Dependencies


v0.24.5
-------

More progressBar (minor) bugs fixed + using ES6 String#repeat()


v0.24.4
-------

ProgressBar width fixed.


v0.24.3
-------

Dependencies


v0.24.2
-------

Dependencies


v0.24.1
-------

Dependencies


v0.24.0
-------

"use strict" everywhere


v0.23.1
-------

Upgrade string-kit from v0.4.0 to v0.4.1, fixing an issue with formatter count and detection


v0.23.0
-------

Breaking change: now rely on string-kit v0.4.x (.format()), so '%[]' -like markup becomes '%[]F' and '%/F3/f -like markup becomes '%[f3]f


v0.22.4 - v0.22.7
-----------------

String-kit dependency.


v0.22.3
-------

Documentation: spelling.


v0.22.2
-------

Better doc on the 'realTerminal' feature.


v0.22.1
-------

New: termkit.realTerminal -- like termkit.terminal but escape pipes.


v0.22.0
-------

No more relying on Node.js core events, now using NextGenEvents for everything.


v0.21.8
-------

Document: more cycle focus bugfixes


v0.21.7
-------

Document: Element#focusNextChild() and Element#focusPreviousChild() bugfix


v0.21.6
-------

Document#giveFocusTo() argument check.


v0.21.5
-------

Dependencies.


v0.21.4
-------

ScreenBuffer: optimized (delta) escape sequences for the terminal blitter are now working properly.


v0.21.3
-------

ScreenBuffer improvements.


v0.21.2
-------

Linux Console: repairing .color256(), thus repairing ScreenBuffer features.


v0.21.1
-------

Document: .focusPrevious() bugfixed.


v0.21.0
-------

Removing inline widget: .layout() and .form(), their Document counter-part should be used instead.


v0.20.32
--------

Internally replacing home-made arrayKit.fill() with ES6 Array#fill().


v0.20.31
--------

TextBuffer: 'hidden' option, .setHidden(), .getHidden(). Document TextInput Element now has the 'hidden' option for passwords.


v0.20.30
--------

TextBuffer: 'hidden' option, .setHidden(), .getHidden(). Document TextInput Element now has the 'hidden' option for passwords.


v0.20.29
--------

Document: Document#focusNext() infinite loop bugfixed, .redraw() for moving and resizing Element, Text#setContent() redraw bugfixed.


v0.20.28
--------

Documentation spelling.


v0.20.27
--------

Document: Text, Element Id and Layout bugfixes.


v0.20.26
--------

Document: .draw() and detached Element bugfix.


v0.20.25
--------

Exit minor bugfix.


v0.20.24
--------

Document: .attach()/.detach()/.destroy() bugfixes.


v0.20.23
--------

Document: .attach()/.detach()/.destroy() bugfixes.


v0.20.22
--------

Document: ENTER and KP_ENTER move to next TextInput in Forms.


v0.20.21
--------

Document: new method .clear() that remove all children


v0.20.20
--------

Document: all Element now have a .destroy() method.


v0.20.19
--------

Buttons are now blinking on submit


v0.20.18
--------

New: all interactive Document Elements now react to the mouse 'click' and 'hover' event!


v0.20.17
--------

Document: MenuBar is renamed DropDownMenu


v0.20.15 - v0.20.16
-------------------

Document MenuBar is now working.


v0.20.14
--------

Document Form navigation. TextBuffer .moveForward() bugfix


v0.20.13
--------

Document MenuBar: better default settings.


v0.20.12
--------

Document MenuBar: work in progress!


v0.20.11
--------

Document ColumnMenu is working!


v0.20.10
--------

Document: Menu is now known as RowMenu. ColumnMenu is in progress. (Those features are not under semver yet - i.e. not documented yet, so no minor version bump for that).


v0.20.9
-------

Document: reversing the logic of preventing propagation of event to parent: now returning a truthy value prevent that.


v0.20.8
-------

Document: event bubbling


v0.20.7
-------

Document: event management changes


v0.20.6
-------

Document Container now has a backgroundAttr option


v0.20.5
-------

Document now rely on nextgen-events instead of Node.js' built-in events.


v0.20.4
-------

New Document Element: Menu.


v0.20.3
-------

ScreenBuffer clipping bugfixed. Document drawing algorithm refactored to support resizing.


v0.20.2
-------

Document: redraw mecanism.


v0.20.1
-------

Document Element Layout is now resizable like the deprecated inline layout was.


v0.20.0
-------

Breaking API change: the Terminal 'resize' event now produces 2 args: width and height, instead of an object to be consistent
with other internal events


v0.19.4
-------

Inline layout ported to Document.


v0.19.3
-------

Document: minor improvement, unique id, document.elements[ id ] access...


v0.19.2
-------

Document element: now perform recursive draw() and drawCursor() automatically


v0.19.1
-------

Document model: Container.


v0.19.0
-------

Now require node.js v4. Document widget currently working: Button, Text, TextInput and Form.


v0.18.0
-------

New feature in progress: Document! It mimics the browser somewhat: a document with element, etc... 
layout, form and area-type inputField will move to this new Document feature (every 'inline' features will be kept separated).


v0.17.0
-------

New: .inputField() now has an 'area' mode (standard mode is now known as 'inline' mode) that use ScreenBuffer and TextBuffer
for its rendering, allowing confined text-area-like inputs. This is still a work in progress and many features of the 'inline' mode
are missing. This will allow creation of terminal forms.


v0.16.14
--------

.createLayout(): it is now possible to pass the x,y coordinate of the top-left corner of the layout


v0.16.13
--------

.createLayout(): now creates accessible and resizable ScreenBuffer surfaces on layout's leaf


v0.16.12
--------

Bugfix .createLayout(): now it creates cross-junction like it should when two tee-junction overlap


v0.16.11
--------

Basic 'responsive' layout drawing is now working.


v0.16.10
--------

Layout: work in progress.


v0.16.9
-------

New feature: .createLayout() -- still in alpha.


v0.16.8
-------

New terminal state: term.state.fullscreen


v0.16.7
-------

Adding new spChars again.


v0.16.6
-------

Adding new spChars.


v0.16.5
-------

New: termkit.spChars now contains some useful utf-8 characters


v0.16.4
-------

Upgrade the string-kit dependency (important bugfix on the style markup feature)


v0.16.3
-------

Documentation on style markup.


v0.16.2
-------

Fixing the new format feature so it works properly.


v0.16.1
-------

Linux gpm patch for node v4.


v0.16.0
-------

Using new string-kit's format feature.


v0.15.12
--------

.yesOrNo(): now it returns a controler featuring the abort() method (see the doc).


v0.15.11
--------

Dependencies: string-kit 0.2.x, async-kit 0.6.x.


v0.15.10
--------

TextBuffer: miscBuffer for application data.


v0.15.9
-------

ScreenBuffer/TextBuffer: Rect constructor improvement.


v0.15.8
-------

ScreenBuffer: redraw delta bugfix.


v0.15.7
-------

TextBuffer: work in progress! (minor bugfixes)


v0.15.6
-------

fileInput() and inputField() improvement and options: 'style', 'default', 'cancelable'.


v0.15.4 - v0.15.5
-----------------

TextBuffer: work in progress! (minor bugfixes)


v0.15.3
-------

fileInput(): fixed few minor bugs.


v0.15.2
-------

New method: fileInput(): it is build on an inputField() that auto-complete and display an auto-complete menu
with all files available in the current directory.


v0.15.1
-------

TextBuffer: work in progress! (TAB support)


v0.15.0
-------

ScreenBuffer: backward incompatible change: "draw( { diffOnly: true } )" is now "draw( { delta: true } )".
TextBuffer: work in progress!


v0.14.8 - v0.14.10
------------------

TextBuffer: work in progress!


v0.14.7
-------

TextBuffer: Basic support is ok!


v0.14.6
-------

ScreenBuffer: delta optimization introduced in v0.14.5 is now disabled - not stable enough.


v0.14.5
-------

ScreenBuffer: attribute delta optimization.


v0.14.4
-------

.inputField(): fixed some issues with BACKSPACE when at the first column, and history UP and DOWN at the bottom line.


v0.14.3
-------

On the previous version, 'prependText' becomes 'prefix' (this feature is still not documented, thus not in the SemVer contract).


v0.14.2
-------

.inputField() autoComplete function: if an array is returned and it contains a custom property 'prependText', the autoCompleteMenu
will display items normaly, but it will return the chosen entry prepended with that text.


v0.14.1
-------

New method: .slowTyping(): it outputs some text with an old-fashioned slow-typing effect. See the doc.


v0.14.0
-------

.singleLineMenu(): support for TAB and SHIFT_TAB keys that cycle forward and backward.
.inputField(): same when in the auto-complete menu (since it uses .singleLineMenu() behind the scene)


v0.13.16
--------

Improvement of cleanup code on exit.
Issue #3 is fixed again (regression somewhere between 0.13.6 and 0.13.14).


v0.13.15
--------

Documentation: 
* nice animated gif for each example of: progressBar, inputField, singleLineMenu, yesOrNo
* fixes in the examples
* .processExit() is now documentated, thus under SemVer
* .progressBar(): .stop() and .resume() method are now documentated, thus under SemVer


v0.13.14
--------

.progressBar(): .stop() and .resume() method (should be documented)
New method: .processExit() that exit cleanly (should be documented)
.getCursorLocation(): do not run in concurrency anymore (fix some issue getting values for another call)


v0.13.11 - v0.13.13
-------------------

.progressBar(): update immediately if the progress value is >= 1, to prevent program from quitting before the progress bar
had a chance to display 'done'.


v0.13.10
--------

.progressBar(): documentation of title and items.


v0.13.9
-------

.progressBar() improvement: 'title mode'. Documentation will be written once stabilized.


v0.13.8
-------

.progressBar() improvement: 'item mode'. Documentation will be written once stabilized.


v0.13.7
-------

.progressBar() can display ETA (activated with the 'eta' option, see the doc)


v0.13.6
-------

New method: .progressBar(), which creates a nice progress bar, see the documentation for details.


v0.13.5
-------

Fix issue #3.


v0.13.3 - v0.13.4
-----------------

Fixing issue #2 with Terminology and mouse reporting.


v0.13.2
-------

.inputField():
* now patched to support characters larger than 2 bytes, but it still has bugs due to full-width chars
* new option 'maxLength': to not allow user to add more characters than this


v0.13.0 - v0.13.1
-----------------

.beep() is deprecated, in favor of .bell().
SHIFT / CTRL / ALT + INSERT / DELETE / PAGE_UP / PAGE_DOWN / HOME / END combo.


v0.12.8
-------

Minor fixes in the demo and tests.


v0.12.7
-------

Fixed an error in the code that may have produced unreported bugs.


v0.12.6
-------

Try-catch when raw mode is not possible.


v0.12.4 - v0.12.5
-----------------

Atomic-Terminal support.


v0.12.3
-------

Bugfix: timeout detection for .getColor() and .getCursorLocation(), .inputField() is changed accordingly (and cleaned up)


v0.12.2
-------

Documentation improvements.


v0.12.1
-------

.singleLineMenu() callback's 'response' argument has 2 new properties: 'x' and 'y', the coordinates of the selected item.


v0.12.0
-------

Backward compatibility broken: .singleLineMenu()'s callback is now:
* callback( error , response ), where:
	* error `mixed` truthy if an underlying error occurs
	* response `Object` where
		* selectedIndex `number` the user-selected menu item index
		* selectedText `string` the user-selected menu item text
		* unexpectedKey `string` when 'exitOnUnexpectedKey' option is set and an unexpected key is pressed, this contains
		  the key that produced the exit

Using named parameters for the callback is a more reliable and flexible API that will avoid breakage in the future,
when feature will be added.


v0.11.3
-------

* .inputField(): custom auto-completer can be asynchronous now, see the doc.

* Documentation: static method termkit.autoComplete() is now documented.


v0.11.2
-------

Improved documentation: formatting, Table of Contents, etc...


v0.11.1
-------

Documentation: features introduced since v0.10.8.


v0.11.0
-------

* .singleLineMenu() has more options: it is possible to define its own item separator, and customize the
  new next/previous page hint feature

* .inputField() option 'menuOption' has moved to/mixed with 'autoCompleteMenu'


v0.10.9
-------

.inputField() now has the option 'autoCompleteMenu' to use in conjunction with 'autoComplete', it displays a single line menu
displaying all the completion candidate, when more than one is possible.


v0.10.8
-------

New method: .singleLineMenu(), which creates a simple menu, the user can select item with arrow keys and RETURN/ENTER.


v0.10.7
-------

Documentation on .createTerminal() is now available.


v0.10.6
-------

Stupid Gnome-terminal do not set COLORTERM environment variable anymore... this is a workaround to detect it.


v0.10.5
-------

Gnome-terminal now supports 24bits colors, so the support for it has been added.


v0.10.4
-------

.inputField() returned value, the inputControler, is now an event emitter (it emits 'ready'), and it features a 'redraw()' method.


v0.10.3
-------

.inputField() now supports an 'autoComplete' option, see the doc


v0.10.2
-------

.inputField() now supports an 'history' option, so UP and DOWN keys move up and down in the history


v0.10.1
-------

.inputField() returns more way to control it:
	* getPosition(): return an object containing 'x' and 'y' properties, the coordinates where the input field starts
	* hide(): hide the input field, it still records keystrokes
	* show(): show the input field again
	* rebase(): rebase the input field to the current cursor position (it does NOT erase the previous one,
	  use hide() before, see the doc)


v0.10.0
-------

.inputField() now returns an object featuring some functions to control things during the input process:
	* abort(): abort the input process and do not even call the inputField()'s callback
	* stop(): stop the input process now, call the inputField()'s callback (same behaviour than a regular 'ENTER' key pressed)
	* getInput(): get the current input string


v0.9.14
-------

Added a link to the tutorials at blog.soulserv.net/tag/terminal.


v0.9.13
-------

Upgraded dependencies.


v0.9.11 - v0.9.12
-----------------

.noFormat() is now documented (thus under the SemVer contract).


v0.9.10
-------

Upgraded to string-kit@0.1.5.


v0.9.9
------

Just a small addition to the documentation: require() are added in most example (user's feedback).


v0.9.8
------

Upgraded dependencies.


v0.9.2 - v0.9.7
---------------

Package description & README.md that better fit the new npmjs.org site.


v0.9.1
-------

Removing tools/sprite-editor.js: the editor has now its own package: 'leeted'.
The demo located in demo/spaceship.js works again (sprites have been converted to file format V2).
Some performance optimization have greatly improved CPU usage.


v0.9.0
-------

File format has changed for ScreenBuffer.loadSync() and screenBuffer.saveSync().
This is now the format version 2.
File of format version 1 can still be loaded/saved using ScreenBuffer.loadSyncV1() and screenBuffer.saveSyncV1().
This file format is more flexible, so improvement to the lib can be achieved without changing the file format each time.


v0.8.0
-------

The Rect class has moved from termkit.ScreenBuffer.Rect to termkit.Rect
The 'key' event callback's argument #2 (data) now contains a 'isCharacter' property, true for printable, false for control
screenBuffer.clear() -> screenBuffer.fill()


v0.7.1
-------

Sprite editor now support the mouse.


v0.7.0
-------

ScreenBuffer now use Big Endian: there is no performance drop on Little Endian system and the code is less error prone.


v0.6.14
-------

ScreenBuffer .put() now support the 'wrap' option, bypassing the default 'wrap' value of the current screenBuffer.


v0.6.13
-------

ScreenBuffer .put() now support writing in any of the 4 directions.
The sprite editor can set the writing direction.


v0.6.12
-------

ScreenBuffer blending: style transparency bugfix.
Improvement of the sprite editor (new features: fill colors/style, put only attributes).
Improvement of the demo graphics.


v0.6.11
-------

Improvement of the sprite editor (editor's background character is not customizable).


v0.6.10
-------

Now it is possible to resize a ScreenBuffer.
Improvement of the sprite editor (sprite resizing, editor's background colors are customizable).


v0.6.9
------

Many type of transparencies: foreground color, background color, style & character.
New: a sprite editor, located in demo/sprite-editor.js.


v0.6.8
------

Refactoring, so the tile-variant & the wrap-variant of blitter are now available for the terminal blitter.


v0.6.7
------

The 'tile' blitter is now faster and cleaner.
Some bugfix on buffer creation (size should be integer, not float).


v0.6.6
------

The buffer to buffer blitter now support the 'tile' option.


v0.6.5
------

The buffer to buffer blitter now support the 'wrap' option.


v0.6.2 - v0.6.4
---------------

Improved terminal's blitter.


v0.6.1
------

ScreenBuffer refactoring.


v0.6.0
------

Major change in the module.exports tree: the backward compatibility is broken, but it can be easily fixed.
Just replace:

var term = require( 'terminal-kit' ) ;

... by:

var term = require( 'terminal-kit' ).terminal ;

Now, that is when the .terminal property is accessed for the first time that a terminal is guessed.

This make the code cleaner and remove any trouble when circular require() occurs: the module does not perform
anything until an userland code request so.


v0.5.17
-------

Spaceship demo: added a spaceship moving with the arrow keys.


v0.5.16
-------

Spaceship demo: scrolling space.


v0.5.15
-------

New: term.ScreenBuffer object. Still a work in progress. Documentation will be available when stabilized.


v0.5.14
-------

Great news: now GPM is supported, so if the daemon is running, the mouse is supported even in the Linux Console!


v0.5.13
-------

Bugfix when COLORTERM is not defined, it causes a crash.


v0.5.12
-------

Documentation on 'MOUSE_BUTTON_RELEASED'.


v0.5.10 - v0.5.11
-----------------

SSH tests.


v0.5.9
------

SSH detection, this does not improve things except that .getDetectedTerminal() use simple guessing
rather than the expensive .getParentTerminalInfo().


v0.5.8
------

Eterm support.


v0.5.7
------

Better support for rxvt/urxvt.
Better terminal guessing.


v0.5.6
------

Bugfix: .grabInput() leak when called multiple times.
Better support for rxvt/urxvt.


v0.5.5
------

Better support for xfce4-terminal.


v0.5.4
------

New terminals supported: Terminator, rxvt, urxvt, xfce4-terminal.


v0.5.3
------

Documentation: DEPRECATE .requestScreenSize()


v0.5.2
------

Refactoring
.setColor() now accept a "names" argument


v0.5.1
------

.getColorRegister() -> .getColor()
Documentation on v0.4.4 features, and about the 24 bits feature.


v0.4.5
------

Bugfix: now Konsole can use 24 bits colors.


v0.4.4
------

.setColor() set a color register to RGB
.getPalette() request from the terminal (if supported) the current 16 colors palette in use.
.setPalette() set the 16 colors palette, it is possible to specify a color scheme name


v0.4.3
------

Now the lib is aware of the default VGA palette for the Linux Console.


v0.4.2
------

Bugfix: .getDetectedTerminal() do not issue error anymore if no terminal was detected, it simply returns
the default terminal.
New: the HSL cylender coordinate is now used to pick up the closest color register match for RGB.
Status of the lib is now BETA.


v0.4.1
------

New high-level function: .getColorRegister()


v0.4.0
------

.color256rgb() -> .colorRgb()
.bgColor256rgb() -> .bgColororRgb()
.color256gray() -> .colorGrayscale()
.bgColor256gray() -> .bgColorGrayscale()

Fallback for 256 colors, if not supported by the terminal, it picks the closest color in the 16 colors.
.setCursorColor() & .setCursorColorRgb() now work fine with the Linux Console.


v0.3.8
------

.setCursorColor() & .setCursorColorRgb() to change the color of the cursor.


v0.3.4 - v0.3.7
---------------

Dependency hell.


v0.3.3
------

Upgraded dependencies (async-kit, tree-kit, string-kit).
